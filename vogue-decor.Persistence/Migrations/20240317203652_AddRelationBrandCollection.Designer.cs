// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using vogue_decor.Persistence;

#nullable disable

namespace vogue_decor.Persistence.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20240317203652_AddRelationBrandCollection")]
    partial class AddRelationBrandCollection
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("vogue_decor.Domain.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Brands", (string)null);
                });

            modelBuilder.Entity("vogue_decor.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("integer");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "russian")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Люстры",
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Бра",
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Настольные лампы",
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Торшеры",
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Подвесные светильники",
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Потолочные светильники",
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Уличный свет",
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            Name = "Подсветка для картин",
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 9,
                            Name = "Треки и споты",
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 10,
                            Name = "Аксессуары к светильникам",
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 11,
                            Name = "Диваны",
                            ProductTypeId = 2
                        },
                        new
                        {
                            Id = 12,
                            Name = "Кресла",
                            ProductTypeId = 2
                        },
                        new
                        {
                            Id = 13,
                            Name = "Столы",
                            ProductTypeId = 2
                        },
                        new
                        {
                            Id = 14,
                            Name = "Стулья",
                            ProductTypeId = 2
                        },
                        new
                        {
                            Id = 15,
                            Name = "Комоды",
                            ProductTypeId = 2
                        },
                        new
                        {
                            Id = 16,
                            Name = "Консоли",
                            ProductTypeId = 2
                        },
                        new
                        {
                            Id = 17,
                            Name = "Кровати",
                            ProductTypeId = 2
                        },
                        new
                        {
                            Id = 18,
                            Name = "Матрасы",
                            ProductTypeId = 2
                        },
                        new
                        {
                            Id = 19,
                            Name = "Пуфы и банкетки",
                            ProductTypeId = 2
                        },
                        new
                        {
                            Id = 20,
                            Name = "Панно / арт объект",
                            ProductTypeId = 3
                        },
                        new
                        {
                            Id = 21,
                            Name = "С принтами",
                            ProductTypeId = 3
                        },
                        new
                        {
                            Id = 22,
                            Name = "Солнышко",
                            ProductTypeId = 3
                        },
                        new
                        {
                            Id = 23,
                            Name = "С деревом",
                            ProductTypeId = 3
                        },
                        new
                        {
                            Id = 24,
                            Name = "Дизайнерские с металлом",
                            ProductTypeId = 3
                        },
                        new
                        {
                            Id = 25,
                            Name = "Классические",
                            ProductTypeId = 3
                        },
                        new
                        {
                            Id = 26,
                            Name = "Настольные",
                            ProductTypeId = 3
                        },
                        new
                        {
                            Id = 27,
                            Name = "Напольные",
                            ProductTypeId = 3
                        },
                        new
                        {
                            Id = 28,
                            Name = "Прямоугольные",
                            ProductTypeId = 3
                        },
                        new
                        {
                            Id = 29,
                            Name = "Круглые",
                            ProductTypeId = 3
                        },
                        new
                        {
                            Id = 30,
                            Name = "Прямоугольные",
                            ProductTypeId = 4
                        },
                        new
                        {
                            Id = 31,
                            Name = "Квадратные",
                            ProductTypeId = 4
                        },
                        new
                        {
                            Id = 32,
                            Name = "Круглые",
                            ProductTypeId = 4
                        },
                        new
                        {
                            Id = 33,
                            Name = "Овальные",
                            ProductTypeId = 4
                        },
                        new
                        {
                            Id = 34,
                            Name = "Дорожки",
                            ProductTypeId = 4
                        },
                        new
                        {
                            Id = 35,
                            Name = "Нестандартные",
                            ProductTypeId = 4
                        },
                        new
                        {
                            Id = 36,
                            Name = "Дизайнерские тарелки",
                            ProductTypeId = 5
                        },
                        new
                        {
                            Id = 37,
                            Name = "Стремянки и скамьи",
                            ProductTypeId = 5
                        },
                        new
                        {
                            Id = 38,
                            Name = "Сушилки",
                            ProductTypeId = 5
                        },
                        new
                        {
                            Id = 39,
                            Name = "Гладильные доски",
                            ProductTypeId = 5
                        },
                        new
                        {
                            Id = 40,
                            Name = "Вешалки напольные",
                            ProductTypeId = 5
                        },
                        new
                        {
                            Id = 41,
                            Name = "Вешалки настенные",
                            ProductTypeId = 5
                        },
                        new
                        {
                            Id = 42,
                            Name = "Аксессуары для ванной",
                            ProductTypeId = 5
                        },
                        new
                        {
                            Id = 43,
                            Name = "Ложки для обуви",
                            ProductTypeId = 5
                        },
                        new
                        {
                            Id = 44,
                            Name = "Вазы и подсвечники",
                            ProductTypeId = 5
                        },
                        new
                        {
                            Id = 45,
                            Name = "Декоративные подушки",
                            ProductTypeId = 5
                        },
                        new
                        {
                            Id = 46,
                            Name = "Пледы",
                            ProductTypeId = 5
                        },
                        new
                        {
                            Id = 47,
                            Name = "Покрывала",
                            ProductTypeId = 5
                        },
                        new
                        {
                            Id = 48,
                            Name = "Современные игрушки и статуэтки",
                            ProductTypeId = 6
                        },
                        new
                        {
                            Id = 49,
                            Name = "Часы",
                            ProductTypeId = 6
                        },
                        new
                        {
                            Id = 50,
                            Name = "Настольные и настенные игры",
                            ProductTypeId = 6
                        },
                        new
                        {
                            Id = 51,
                            Name = "Зонты",
                            ProductTypeId = 6
                        },
                        new
                        {
                            Id = 52,
                            Name = "Подставки для зонтов",
                            ProductTypeId = 6
                        },
                        new
                        {
                            Id = 53,
                            Name = "Ложки для обуви",
                            ProductTypeId = 6
                        },
                        new
                        {
                            Id = 54,
                            Name = "Держатели книг",
                            ProductTypeId = 6
                        },
                        new
                        {
                            Id = 55,
                            Name = "Арт-объекты",
                            ProductTypeId = 7
                        },
                        new
                        {
                            Id = 56,
                            Name = "Картины авторские",
                            ProductTypeId = 7
                        },
                        new
                        {
                            Id = 57,
                            Name = "Постеры",
                            ProductTypeId = 7
                        },
                        new
                        {
                            Id = 58,
                            Name = "Панно с лего",
                            ProductTypeId = 7
                        },
                        new
                        {
                            Id = 59,
                            Name = "Панно в спортивном стиле",
                            ProductTypeId = 7
                        },
                        new
                        {
                            Id = 60,
                            Name = "Репродукция",
                            ProductTypeId = 7
                        },
                        new
                        {
                            Id = 61,
                            Name = "Абажуры",
                            ProductTypeId = 8
                        },
                        new
                        {
                            Id = 62,
                            Name = "Колпаки и крепления",
                            ProductTypeId = 8
                        },
                        new
                        {
                            Id = 63,
                            Name = "Лампочки",
                            ProductTypeId = 8
                        },
                        new
                        {
                            Id = 64,
                            Name = "Светодиодные ленты и подсветки",
                            ProductTypeId = 8
                        });
                });

            modelBuilder.Entity("vogue_decor.Domain.ChandelierType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "russian")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("ChandelierTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Большие"
                        },
                        new
                        {
                            Id = 2,
                            Name = "С хрусталями"
                        },
                        new
                        {
                            Id = 3,
                            Name = "С абажурами"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Подвесные"
                        },
                        new
                        {
                            Id = 5,
                            Name = "С потолочным креплением"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Овальные"
                        });
                });

            modelBuilder.Entity("vogue_decor.Domain.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Collections", (string)null);
                });

            modelBuilder.Entity("vogue_decor.Domain.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EngName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "russian")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "EngName" });

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("Colors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EngName = "Gold",
                            Name = "Золотой"
                        },
                        new
                        {
                            Id = 2,
                            EngName = "Bronze",
                            Name = "Бронзовый"
                        },
                        new
                        {
                            Id = 3,
                            EngName = "Silver",
                            Name = "Серебристый"
                        },
                        new
                        {
                            Id = 4,
                            EngName = "Nickel",
                            Name = "Никель"
                        },
                        new
                        {
                            Id = 5,
                            EngName = "Chrome",
                            Name = "Хром"
                        },
                        new
                        {
                            Id = 6,
                            EngName = "White",
                            Name = "Белый"
                        },
                        new
                        {
                            Id = 7,
                            EngName = "Black",
                            Name = "Чёрный"
                        },
                        new
                        {
                            Id = 8,
                            EngName = "Clear",
                            Name = "Прозрачный"
                        },
                        new
                        {
                            Id = 9,
                            EngName = "Beige",
                            Name = "Бежевый"
                        },
                        new
                        {
                            Id = 10,
                            EngName = "Light blue",
                            Name = "Голубой"
                        },
                        new
                        {
                            Id = 11,
                            EngName = "Yellow",
                            Name = "Жёлтый"
                        },
                        new
                        {
                            Id = 12,
                            EngName = "Green",
                            Name = "Зелёный"
                        },
                        new
                        {
                            Id = 13,
                            EngName = "Brown",
                            Name = "Коричневый"
                        },
                        new
                        {
                            Id = 14,
                            EngName = "Red",
                            Name = "Красный"
                        },
                        new
                        {
                            Id = 15,
                            EngName = "Orange",
                            Name = "Оранжевый"
                        },
                        new
                        {
                            Id = 16,
                            EngName = "Pink",
                            Name = "Розовый"
                        },
                        new
                        {
                            Id = 17,
                            EngName = "Gray",
                            Name = "Серый"
                        },
                        new
                        {
                            Id = 18,
                            EngName = "Blue",
                            Name = "Синий"
                        },
                        new
                        {
                            Id = 19,
                            EngName = "Purple",
                            Name = "Фиолетовый"
                        });
                });

            modelBuilder.Entity("vogue_decor.Domain.Favourite", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Favourites", (string)null);
                });

            modelBuilder.Entity("vogue_decor.Domain.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Files", (string)null);
                });

            modelBuilder.Entity("vogue_decor.Domain.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("vogue_decor.Domain.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "russian")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("Materials", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Металлический"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Стеклянный"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Деревянный"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Смешанный"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Шёлковый"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Арт-шёлк"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Шерстяной"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Вискозный"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Искусственная нить"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Хлоповый"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Искусственный"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Бумажный"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Пластиковый"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Гипсовый"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Полиэстер"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Латунь"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Бронза"
                        });
                });

            modelBuilder.Entity("vogue_decor.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Availability")
                        .HasColumnType("integer");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<int[]>("ChandelierTypes")
                        .HasColumnType("integer[]");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<int[]>("Colors")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<long?>("Discount")
                        .HasColumnType("bigint");

                    b.Property<decimal[]>("Height")
                        .HasColumnType("numeric[]");

                    b.Property<decimal?>("Indent")
                        .HasColumnType("numeric");

                    b.Property<int?>("Index")
                        .HasColumnType("integer");

                    b.Property<int?>("LampCount")
                        .HasColumnType("integer");

                    b.Property<decimal[]>("Length")
                        .HasColumnType("numeric[]");

                    b.Property<int[]>("Materials")
                        .HasColumnType("integer[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int[]>("PictureMaterial")
                        .HasColumnType("integer[]");

                    b.Property<string>("Plinth")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PurchasedCount")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("numeric");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector");

                    b.Property<int[]>("Styles")
                        .HasColumnType("integer[]");

                    b.Property<int[]>("Types")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<List<string>>("Urls")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<decimal[]>("Width")
                        .HasColumnType("numeric[]");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("vogue_decor.Domain.ProductMaterial", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("MaterialId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("ProductMaterials", (string)null);
                });

            modelBuilder.Entity("vogue_decor.Domain.ProductStyle", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("StyleId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "StyleId");

                    b.HasIndex("StyleId");

                    b.ToTable("ProductStyles", (string)null);
                });

            modelBuilder.Entity("vogue_decor.Domain.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "russian")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("ProductTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Свет"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Мебель"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Зеркала"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ковры"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Товары для дома"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Аксессуары"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Картины и пано"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Аксессуары к светильникам"
                        });
                });

            modelBuilder.Entity("vogue_decor.Domain.ProductUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductUsers", (string)null);
                });

            modelBuilder.Entity("vogue_decor.Domain.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "russian")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("Styles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Классика"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Нео-классика"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Лофт"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Поп-Арт"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Модерн"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Арт-деко"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Минималист"
                        },
                        new
                        {
                            Id = 8,
                            Name = "ХайТек"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Скандинавский"
                        });
                });

            modelBuilder.Entity("vogue_decor.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("ConfirmationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("vogue_decor.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("vogue_decor.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vogue_decor.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("vogue_decor.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("vogue_decor.Domain.Collection", b =>
                {
                    b.HasOne("vogue_decor.Domain.Brand", "Brand")
                        .WithMany("Collections")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("vogue_decor.Domain.Favourite", b =>
                {
                    b.HasOne("vogue_decor.Domain.Product", "Product")
                        .WithMany("Favourites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vogue_decor.Domain.User", "User")
                        .WithMany("Favourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("vogue_decor.Domain.Log", b =>
                {
                    b.HasOne("vogue_decor.Domain.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("vogue_decor.Domain.Product", b =>
                {
                    b.HasOne("vogue_decor.Domain.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vogue_decor.Domain.Collection", "Collection")
                        .WithMany("Products")
                        .HasForeignKey("CollectionId");

                    b.Navigation("Brand");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("vogue_decor.Domain.ProductMaterial", b =>
                {
                    b.HasOne("vogue_decor.Domain.Material", "Material")
                        .WithMany("ProductMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vogue_decor.Domain.Product", "Product")
                        .WithMany("ProductMaterials")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("vogue_decor.Domain.ProductStyle", b =>
                {
                    b.HasOne("vogue_decor.Domain.Product", "Product")
                        .WithMany("ProductStyles")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vogue_decor.Domain.Style", "Style")
                        .WithMany("ProductStyles")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("vogue_decor.Domain.ProductUser", b =>
                {
                    b.HasOne("vogue_decor.Domain.Product", "Product")
                        .WithMany("ProductUsers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vogue_decor.Domain.User", "User")
                        .WithMany("ProductUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("vogue_decor.Domain.Brand", b =>
                {
                    b.Navigation("Collections");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("vogue_decor.Domain.Collection", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("vogue_decor.Domain.Material", b =>
                {
                    b.Navigation("ProductMaterials");
                });

            modelBuilder.Entity("vogue_decor.Domain.Product", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("ProductMaterials");

                    b.Navigation("ProductStyles");

                    b.Navigation("ProductUsers");
                });

            modelBuilder.Entity("vogue_decor.Domain.Style", b =>
                {
                    b.Navigation("ProductStyles");
                });

            modelBuilder.Entity("vogue_decor.Domain.User", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("Logs");

                    b.Navigation("ProductUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
